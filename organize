마크업 언어 (Markup Language)

정의 문서나 데이터를 구조화하고 서식을 지정하는 언어

목적 문서의 구조를 정의하고, 내용의 표현 방식, 기능(링크 , 이미지 등)을 지정

형식 태그(tag)나 특정한 문법을 사용하여 구성

대상 문서(텍스트, 이미지 등)

메타데이터 (Metadata)

목적 데이터에 대한 속성, 의미, 관계 등을 설명

형식 일반적으로 키-값(key-value) 형태로 저장

데이터(파일, 이미지, 웹 페이지)

Cascading Style Sheets
웹 페이지의 레이아웃과 글꼴 색상 등의 디자인을 입히는 역할

Node.js
Run JavaScript Everywhere
서버 측에서 자바스크립트를 실행할 수 있게 해주는 런타임 환경
Node.js는 OS 수준의 플랫폼이 아니다
• 플랫폼(Platform)은 일반적으로 하드웨어나 운영체제 수준에서 실행 환경을 제공한다.
• 반면 Node.js는 특정 운영체제에 종속되지 않고, 다양한 OS에서 실행 가능한 JavaScript 실행 환경을 제공한다.
• 따라서 Node.js 자체는 OS를 대체하지 않고, OS 위에서 동작하는 "환경(Environment)"에 가깝다.

Node.js는 특정 기능을 강제하지 않는다
• 플랫폼(Platform)은 일반적으로 개발자에게 특정한 개발 방식이나 구조를 강제한다.
• 예를 들어, .NET, Spring, Django 같은 플랫폼은 개발 방식과 구조를 어느 정도 강제한다.
• 하지만 Node.js는 특정한 개발 방식을 강요하지 않고, 실행 환경만 제공한다.
 Node.js는 "서버로 사용할 수도 있고, CLI 도구로도 활용 가능"
 즉, 웹 프레임워크가 아니며, 특정 아키텍처를 강요하지 않는다

Integrated Development Environment
소프트웨어 개발을 쉽게 할 수 있도록 코드 편집, 디버깅, 빌드, 실행 등의
기능을 하나의 프로그램에 통합한 개발 도구

IDE의 주요 기능
• 코드 편집기(Code Editor) : 구문 강조, 자동 완성, 코드 포맷팅 등을 지원
• 디버거(Debugger) : 코드 실행 중 오류를 탐지하고 수정할 수 있도록 지원
• 빌드 자동화 : 소스 코드를 컴파일하고 실행 파일을 생성하는 과정을 자동화하는 도구를 제공
• 버전 관리 연동 : Git, SVN 같은 형상 관리 시스템과 통합
• 프로젝트 관리 : 여러 파일을 체계적으로 관리 가능
• 패키지 관리자 연동 : npm, pip, Maven 등과의 호환성 제공
• 플러그인 및 확장성 : 다양한 플러그인이나 확장 기능을 통해 IDE의 기능을 추가하거나 사용자
맞춤형 환경을 구성

